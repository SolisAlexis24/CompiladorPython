Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main LlaveI code LlaveD
Rule 2     code -> declaration
Rule 3     code -> definition
Rule 4     code -> ifCond
Rule 5     code -> empty
Rule 6     declaration -> int ID asign PyC code
Rule 7     declaration -> bool ID asign PyC code
Rule 8     asign -> empty
Rule 9     asign -> ASIGNA expression
Rule 10    definition -> identifier ASIGNA expression PyC code
Rule 11    expression -> expression OR A
Rule 12    expression -> A
Rule 13    A -> A AND B
Rule 14    A -> B
Rule 15    B -> NOT B
Rule 16    B -> C
Rule 17    B -> true
Rule 18    B -> false
Rule 19    C -> C IGUAL D
Rule 20    C -> C DIFERENTE D
Rule 21    C -> D
Rule 22    D -> D MENOR expression1
Rule 23    D -> D MAYOR expression1
Rule 24    D -> D MENORIG expression1
Rule 25    D -> D MAYORIG expression1
Rule 26    D -> expression1
Rule 27    expression1 -> expression1 MAS T
Rule 28    expression1 -> expression1 MENOS T
Rule 29    expression1 -> T
Rule 30    T -> T POR F
Rule 31    T -> T DIVIDE F
Rule 32    T -> F
Rule 33    F -> H POTENCIA F
Rule 34    F -> H
Rule 35    H -> ParI expression ParD
Rule 36    H -> identifier
Rule 37    H -> ENTERO
Rule 38    identifier -> ID
Rule 39    ifCond -> if ParI expression ParD LlaveI code LlaveD ifElse
Rule 40    ifElse -> else LlaveI code LlaveD code
Rule 41    ifElse -> code
Rule 42    empty -> <empty>

Terminals, with rules where they appear

AND                  : 13
ASIGNA               : 9 10
DIFERENTE            : 20
DIVIDE               : 31
ENTERO               : 37
ID                   : 6 7 38
IGUAL                : 19
LlaveD               : 1 39 40
LlaveI               : 1 39 40
MAS                  : 27
MAYOR                : 23
MAYORIG              : 25
MENOR                : 22
MENORIG              : 24
MENOS                : 28
NOT                  : 15
OR                   : 11
POR                  : 30
POTENCIA             : 33
ParD                 : 35 39
ParI                 : 35 39
PyC                  : 6 7 10
bool                 : 7
else                 : 40
error                : 
false                : 18
if                   : 39
int                  : 6
main                 : 1
true                 : 17

Nonterminals, with rules where they appear

A                    : 11 12 13
B                    : 13 14 15
C                    : 16 19 20
D                    : 19 20 21 22 23 24 25
F                    : 30 31 32 33
H                    : 33 34
T                    : 27 28 29 30 31
asign                : 6 7
code                 : 1 6 7 10 39 40 40 41
declaration          : 2
definition           : 3
empty                : 5 8
expression           : 9 10 11 35 39
expression1          : 22 23 24 25 26 27 28
identifier           : 10 36
ifCond               : 4
ifElse               : 39
program              : 0


state 0

    (0) S' -> . program
    (1) program -> . main LlaveI code LlaveD

    main            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> main . LlaveI code LlaveD

    LlaveI          shift and go to state 3


state 3

    (1) program -> main LlaveI . code LlaveD
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 4
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 4

    (1) program -> main LlaveI code . LlaveD

    LlaveD          shift and go to state 14


state 5

    (2) code -> declaration .

    LlaveD          reduce using rule 2 (code -> declaration .)


state 6

    (3) code -> definition .

    LlaveD          reduce using rule 3 (code -> definition .)


state 7

    (4) code -> ifCond .

    LlaveD          reduce using rule 4 (code -> ifCond .)


state 8

    (5) code -> empty .

    LlaveD          reduce using rule 5 (code -> empty .)


state 9

    (6) declaration -> int . ID asign PyC code

    ID              shift and go to state 15


state 10

    (38) identifier -> ID .

    ASIGNA          reduce using rule 38 (identifier -> ID .)
    POTENCIA        reduce using rule 38 (identifier -> ID .)
    POR             reduce using rule 38 (identifier -> ID .)
    DIVIDE          reduce using rule 38 (identifier -> ID .)
    MAS             reduce using rule 38 (identifier -> ID .)
    MENOS           reduce using rule 38 (identifier -> ID .)
    MENOR           reduce using rule 38 (identifier -> ID .)
    MAYOR           reduce using rule 38 (identifier -> ID .)
    MENORIG         reduce using rule 38 (identifier -> ID .)
    MAYORIG         reduce using rule 38 (identifier -> ID .)
    IGUAL           reduce using rule 38 (identifier -> ID .)
    DIFERENTE       reduce using rule 38 (identifier -> ID .)
    AND             reduce using rule 38 (identifier -> ID .)
    PyC             reduce using rule 38 (identifier -> ID .)
    OR              reduce using rule 38 (identifier -> ID .)
    ParD            reduce using rule 38 (identifier -> ID .)


state 11

    (7) declaration -> bool . ID asign PyC code

    ID              shift and go to state 16


state 12

    (10) definition -> identifier . ASIGNA expression PyC code

    ASIGNA          shift and go to state 17


state 13

    (39) ifCond -> if . ParI expression ParD LlaveI code LlaveD ifElse

    ParI            shift and go to state 18


state 14

    (1) program -> main LlaveI code LlaveD .

    $end            reduce using rule 1 (program -> main LlaveI code LlaveD .)


state 15

    (6) declaration -> int ID . asign PyC code
    (8) asign -> . empty
    (9) asign -> . ASIGNA expression
    (42) empty -> .

    ASIGNA          shift and go to state 21
    PyC             reduce using rule 42 (empty -> .)

    asign                          shift and go to state 19
    empty                          shift and go to state 20

state 16

    (7) declaration -> bool ID . asign PyC code
    (8) asign -> . empty
    (9) asign -> . ASIGNA expression
    (42) empty -> .

    ASIGNA          shift and go to state 21
    PyC             reduce using rule 42 (empty -> .)

    asign                          shift and go to state 22
    empty                          shift and go to state 20

state 17

    (10) definition -> identifier ASIGNA . expression PyC code
    (11) expression -> . expression OR A
    (12) expression -> . A
    (13) A -> . A AND B
    (14) A -> . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    identifier                     shift and go to state 23
    expression                     shift and go to state 24
    A                              shift and go to state 25
    B                              shift and go to state 26
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35

state 18

    (39) ifCond -> if ParI . expression ParD LlaveI code LlaveD ifElse
    (11) expression -> . expression OR A
    (12) expression -> . A
    (13) A -> . A AND B
    (14) A -> . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression                     shift and go to state 38
    A                              shift and go to state 25
    B                              shift and go to state 26
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 19

    (6) declaration -> int ID asign . PyC code

    PyC             shift and go to state 39


state 20

    (8) asign -> empty .

    PyC             reduce using rule 8 (asign -> empty .)


state 21

    (9) asign -> ASIGNA . expression
    (11) expression -> . expression OR A
    (12) expression -> . A
    (13) A -> . A AND B
    (14) A -> . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression                     shift and go to state 40
    A                              shift and go to state 25
    B                              shift and go to state 26
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 22

    (7) declaration -> bool ID asign . PyC code

    PyC             shift and go to state 41


state 23

    (36) H -> identifier .

    POTENCIA        reduce using rule 36 (H -> identifier .)
    POR             reduce using rule 36 (H -> identifier .)
    DIVIDE          reduce using rule 36 (H -> identifier .)
    MAS             reduce using rule 36 (H -> identifier .)
    MENOS           reduce using rule 36 (H -> identifier .)
    MENOR           reduce using rule 36 (H -> identifier .)
    MAYOR           reduce using rule 36 (H -> identifier .)
    MENORIG         reduce using rule 36 (H -> identifier .)
    MAYORIG         reduce using rule 36 (H -> identifier .)
    IGUAL           reduce using rule 36 (H -> identifier .)
    DIFERENTE       reduce using rule 36 (H -> identifier .)
    AND             reduce using rule 36 (H -> identifier .)
    PyC             reduce using rule 36 (H -> identifier .)
    OR              reduce using rule 36 (H -> identifier .)
    ParD            reduce using rule 36 (H -> identifier .)


state 24

    (10) definition -> identifier ASIGNA expression . PyC code
    (11) expression -> expression . OR A

    PyC             shift and go to state 42
    OR              shift and go to state 43


state 25

    (12) expression -> A .
    (13) A -> A . AND B

    PyC             reduce using rule 12 (expression -> A .)
    OR              reduce using rule 12 (expression -> A .)
    ParD            reduce using rule 12 (expression -> A .)
    AND             shift and go to state 44


state 26

    (14) A -> B .

    AND             reduce using rule 14 (A -> B .)
    PyC             reduce using rule 14 (A -> B .)
    OR              reduce using rule 14 (A -> B .)
    ParD            reduce using rule 14 (A -> B .)


state 27

    (15) B -> NOT . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    B                              shift and go to state 45
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 28

    (16) B -> C .
    (19) C -> C . IGUAL D
    (20) C -> C . DIFERENTE D

    AND             reduce using rule 16 (B -> C .)
    PyC             reduce using rule 16 (B -> C .)
    OR              reduce using rule 16 (B -> C .)
    ParD            reduce using rule 16 (B -> C .)
    IGUAL           shift and go to state 46
    DIFERENTE       shift and go to state 47


state 29

    (17) B -> true .

    AND             reduce using rule 17 (B -> true .)
    PyC             reduce using rule 17 (B -> true .)
    OR              reduce using rule 17 (B -> true .)
    ParD            reduce using rule 17 (B -> true .)


state 30

    (18) B -> false .

    AND             reduce using rule 18 (B -> false .)
    PyC             reduce using rule 18 (B -> false .)
    OR              reduce using rule 18 (B -> false .)
    ParD            reduce using rule 18 (B -> false .)


state 31

    (21) C -> D .
    (22) D -> D . MENOR expression1
    (23) D -> D . MAYOR expression1
    (24) D -> D . MENORIG expression1
    (25) D -> D . MAYORIG expression1

    IGUAL           reduce using rule 21 (C -> D .)
    DIFERENTE       reduce using rule 21 (C -> D .)
    AND             reduce using rule 21 (C -> D .)
    PyC             reduce using rule 21 (C -> D .)
    OR              reduce using rule 21 (C -> D .)
    ParD            reduce using rule 21 (C -> D .)
    MENOR           shift and go to state 48
    MAYOR           shift and go to state 49
    MENORIG         shift and go to state 50
    MAYORIG         shift and go to state 51


state 32

    (26) D -> expression1 .
    (27) expression1 -> expression1 . MAS T
    (28) expression1 -> expression1 . MENOS T

    MENOR           reduce using rule 26 (D -> expression1 .)
    MAYOR           reduce using rule 26 (D -> expression1 .)
    MENORIG         reduce using rule 26 (D -> expression1 .)
    MAYORIG         reduce using rule 26 (D -> expression1 .)
    IGUAL           reduce using rule 26 (D -> expression1 .)
    DIFERENTE       reduce using rule 26 (D -> expression1 .)
    AND             reduce using rule 26 (D -> expression1 .)
    PyC             reduce using rule 26 (D -> expression1 .)
    OR              reduce using rule 26 (D -> expression1 .)
    ParD            reduce using rule 26 (D -> expression1 .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53


state 33

    (29) expression1 -> T .
    (30) T -> T . POR F
    (31) T -> T . DIVIDE F

    MAS             reduce using rule 29 (expression1 -> T .)
    MENOS           reduce using rule 29 (expression1 -> T .)
    MENOR           reduce using rule 29 (expression1 -> T .)
    MAYOR           reduce using rule 29 (expression1 -> T .)
    MENORIG         reduce using rule 29 (expression1 -> T .)
    MAYORIG         reduce using rule 29 (expression1 -> T .)
    IGUAL           reduce using rule 29 (expression1 -> T .)
    DIFERENTE       reduce using rule 29 (expression1 -> T .)
    AND             reduce using rule 29 (expression1 -> T .)
    PyC             reduce using rule 29 (expression1 -> T .)
    OR              reduce using rule 29 (expression1 -> T .)
    ParD            reduce using rule 29 (expression1 -> T .)
    POR             shift and go to state 54
    DIVIDE          shift and go to state 55


state 34

    (32) T -> F .

    POR             reduce using rule 32 (T -> F .)
    DIVIDE          reduce using rule 32 (T -> F .)
    MAS             reduce using rule 32 (T -> F .)
    MENOS           reduce using rule 32 (T -> F .)
    MENOR           reduce using rule 32 (T -> F .)
    MAYOR           reduce using rule 32 (T -> F .)
    MENORIG         reduce using rule 32 (T -> F .)
    MAYORIG         reduce using rule 32 (T -> F .)
    IGUAL           reduce using rule 32 (T -> F .)
    DIFERENTE       reduce using rule 32 (T -> F .)
    AND             reduce using rule 32 (T -> F .)
    PyC             reduce using rule 32 (T -> F .)
    OR              reduce using rule 32 (T -> F .)
    ParD            reduce using rule 32 (T -> F .)


state 35

    (33) F -> H . POTENCIA F
    (34) F -> H .

    POTENCIA        shift and go to state 56
    POR             reduce using rule 34 (F -> H .)
    DIVIDE          reduce using rule 34 (F -> H .)
    MAS             reduce using rule 34 (F -> H .)
    MENOS           reduce using rule 34 (F -> H .)
    MENOR           reduce using rule 34 (F -> H .)
    MAYOR           reduce using rule 34 (F -> H .)
    MENORIG         reduce using rule 34 (F -> H .)
    MAYORIG         reduce using rule 34 (F -> H .)
    IGUAL           reduce using rule 34 (F -> H .)
    DIFERENTE       reduce using rule 34 (F -> H .)
    AND             reduce using rule 34 (F -> H .)
    PyC             reduce using rule 34 (F -> H .)
    OR              reduce using rule 34 (F -> H .)
    ParD            reduce using rule 34 (F -> H .)


state 36

    (35) H -> ParI . expression ParD
    (11) expression -> . expression OR A
    (12) expression -> . A
    (13) A -> . A AND B
    (14) A -> . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression                     shift and go to state 57
    A                              shift and go to state 25
    B                              shift and go to state 26
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 37

    (37) H -> ENTERO .

    POTENCIA        reduce using rule 37 (H -> ENTERO .)
    POR             reduce using rule 37 (H -> ENTERO .)
    DIVIDE          reduce using rule 37 (H -> ENTERO .)
    MAS             reduce using rule 37 (H -> ENTERO .)
    MENOS           reduce using rule 37 (H -> ENTERO .)
    MENOR           reduce using rule 37 (H -> ENTERO .)
    MAYOR           reduce using rule 37 (H -> ENTERO .)
    MENORIG         reduce using rule 37 (H -> ENTERO .)
    MAYORIG         reduce using rule 37 (H -> ENTERO .)
    IGUAL           reduce using rule 37 (H -> ENTERO .)
    DIFERENTE       reduce using rule 37 (H -> ENTERO .)
    AND             reduce using rule 37 (H -> ENTERO .)
    PyC             reduce using rule 37 (H -> ENTERO .)
    OR              reduce using rule 37 (H -> ENTERO .)
    ParD            reduce using rule 37 (H -> ENTERO .)


state 38

    (39) ifCond -> if ParI expression . ParD LlaveI code LlaveD ifElse
    (11) expression -> expression . OR A

    ParD            shift and go to state 58
    OR              shift and go to state 43


state 39

    (6) declaration -> int ID asign PyC . code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 59
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 40

    (9) asign -> ASIGNA expression .
    (11) expression -> expression . OR A

    PyC             reduce using rule 9 (asign -> ASIGNA expression .)
    OR              shift and go to state 43


state 41

    (7) declaration -> bool ID asign PyC . code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 60
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 42

    (10) definition -> identifier ASIGNA expression PyC . code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    identifier                     shift and go to state 12
    code                           shift and go to state 61
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8

state 43

    (11) expression -> expression OR . A
    (13) A -> . A AND B
    (14) A -> . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    A                              shift and go to state 62
    B                              shift and go to state 26
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 44

    (13) A -> A AND . B
    (15) B -> . NOT B
    (16) B -> . C
    (17) B -> . true
    (18) B -> . false
    (19) C -> . C IGUAL D
    (20) C -> . C DIFERENTE D
    (21) C -> . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    NOT             shift and go to state 27
    true            shift and go to state 29
    false           shift and go to state 30
    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    B                              shift and go to state 63
    C                              shift and go to state 28
    D                              shift and go to state 31
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 45

    (15) B -> NOT B .

    AND             reduce using rule 15 (B -> NOT B .)
    PyC             reduce using rule 15 (B -> NOT B .)
    OR              reduce using rule 15 (B -> NOT B .)
    ParD            reduce using rule 15 (B -> NOT B .)


state 46

    (19) C -> C IGUAL . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    D                              shift and go to state 64
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 47

    (20) C -> C DIFERENTE . D
    (22) D -> . D MENOR expression1
    (23) D -> . D MAYOR expression1
    (24) D -> . D MENORIG expression1
    (25) D -> . D MAYORIG expression1
    (26) D -> . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    D                              shift and go to state 65
    expression1                    shift and go to state 32
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 48

    (22) D -> D MENOR . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression1                    shift and go to state 66
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 49

    (23) D -> D MAYOR . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression1                    shift and go to state 67
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 50

    (24) D -> D MENORIG . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression1                    shift and go to state 68
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 51

    (25) D -> D MAYORIG . expression1
    (27) expression1 -> . expression1 MAS T
    (28) expression1 -> . expression1 MENOS T
    (29) expression1 -> . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    expression1                    shift and go to state 69
    T                              shift and go to state 33
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 52

    (27) expression1 -> expression1 MAS . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    T                              shift and go to state 70
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 53

    (28) expression1 -> expression1 MENOS . T
    (30) T -> . T POR F
    (31) T -> . T DIVIDE F
    (32) T -> . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    T                              shift and go to state 71
    F                              shift and go to state 34
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 54

    (30) T -> T POR . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    F                              shift and go to state 72
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 55

    (31) T -> T DIVIDE . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    F                              shift and go to state 73
    H                              shift and go to state 35
    identifier                     shift and go to state 23

state 56

    (33) F -> H POTENCIA . F
    (33) F -> . H POTENCIA F
    (34) F -> . H
    (35) H -> . ParI expression ParD
    (36) H -> . identifier
    (37) H -> . ENTERO
    (38) identifier -> . ID

    ParI            shift and go to state 36
    ENTERO          shift and go to state 37
    ID              shift and go to state 10

    H                              shift and go to state 35
    F                              shift and go to state 74
    identifier                     shift and go to state 23

state 57

    (35) H -> ParI expression . ParD
    (11) expression -> expression . OR A

    ParD            shift and go to state 75
    OR              shift and go to state 43


state 58

    (39) ifCond -> if ParI expression ParD . LlaveI code LlaveD ifElse

    LlaveI          shift and go to state 76


state 59

    (6) declaration -> int ID asign PyC code .

    LlaveD          reduce using rule 6 (declaration -> int ID asign PyC code .)


state 60

    (7) declaration -> bool ID asign PyC code .

    LlaveD          reduce using rule 7 (declaration -> bool ID asign PyC code .)


state 61

    (10) definition -> identifier ASIGNA expression PyC code .

    LlaveD          reduce using rule 10 (definition -> identifier ASIGNA expression PyC code .)


state 62

    (11) expression -> expression OR A .
    (13) A -> A . AND B

    PyC             reduce using rule 11 (expression -> expression OR A .)
    OR              reduce using rule 11 (expression -> expression OR A .)
    ParD            reduce using rule 11 (expression -> expression OR A .)
    AND             shift and go to state 44


state 63

    (13) A -> A AND B .

    AND             reduce using rule 13 (A -> A AND B .)
    PyC             reduce using rule 13 (A -> A AND B .)
    OR              reduce using rule 13 (A -> A AND B .)
    ParD            reduce using rule 13 (A -> A AND B .)


state 64

    (19) C -> C IGUAL D .
    (22) D -> D . MENOR expression1
    (23) D -> D . MAYOR expression1
    (24) D -> D . MENORIG expression1
    (25) D -> D . MAYORIG expression1

    IGUAL           reduce using rule 19 (C -> C IGUAL D .)
    DIFERENTE       reduce using rule 19 (C -> C IGUAL D .)
    AND             reduce using rule 19 (C -> C IGUAL D .)
    PyC             reduce using rule 19 (C -> C IGUAL D .)
    OR              reduce using rule 19 (C -> C IGUAL D .)
    ParD            reduce using rule 19 (C -> C IGUAL D .)
    MENOR           shift and go to state 48
    MAYOR           shift and go to state 49
    MENORIG         shift and go to state 50
    MAYORIG         shift and go to state 51


state 65

    (20) C -> C DIFERENTE D .
    (22) D -> D . MENOR expression1
    (23) D -> D . MAYOR expression1
    (24) D -> D . MENORIG expression1
    (25) D -> D . MAYORIG expression1

    IGUAL           reduce using rule 20 (C -> C DIFERENTE D .)
    DIFERENTE       reduce using rule 20 (C -> C DIFERENTE D .)
    AND             reduce using rule 20 (C -> C DIFERENTE D .)
    PyC             reduce using rule 20 (C -> C DIFERENTE D .)
    OR              reduce using rule 20 (C -> C DIFERENTE D .)
    ParD            reduce using rule 20 (C -> C DIFERENTE D .)
    MENOR           shift and go to state 48
    MAYOR           shift and go to state 49
    MENORIG         shift and go to state 50
    MAYORIG         shift and go to state 51


state 66

    (22) D -> D MENOR expression1 .
    (27) expression1 -> expression1 . MAS T
    (28) expression1 -> expression1 . MENOS T

    MENOR           reduce using rule 22 (D -> D MENOR expression1 .)
    MAYOR           reduce using rule 22 (D -> D MENOR expression1 .)
    MENORIG         reduce using rule 22 (D -> D MENOR expression1 .)
    MAYORIG         reduce using rule 22 (D -> D MENOR expression1 .)
    IGUAL           reduce using rule 22 (D -> D MENOR expression1 .)
    DIFERENTE       reduce using rule 22 (D -> D MENOR expression1 .)
    AND             reduce using rule 22 (D -> D MENOR expression1 .)
    PyC             reduce using rule 22 (D -> D MENOR expression1 .)
    OR              reduce using rule 22 (D -> D MENOR expression1 .)
    ParD            reduce using rule 22 (D -> D MENOR expression1 .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53


state 67

    (23) D -> D MAYOR expression1 .
    (27) expression1 -> expression1 . MAS T
    (28) expression1 -> expression1 . MENOS T

    MENOR           reduce using rule 23 (D -> D MAYOR expression1 .)
    MAYOR           reduce using rule 23 (D -> D MAYOR expression1 .)
    MENORIG         reduce using rule 23 (D -> D MAYOR expression1 .)
    MAYORIG         reduce using rule 23 (D -> D MAYOR expression1 .)
    IGUAL           reduce using rule 23 (D -> D MAYOR expression1 .)
    DIFERENTE       reduce using rule 23 (D -> D MAYOR expression1 .)
    AND             reduce using rule 23 (D -> D MAYOR expression1 .)
    PyC             reduce using rule 23 (D -> D MAYOR expression1 .)
    OR              reduce using rule 23 (D -> D MAYOR expression1 .)
    ParD            reduce using rule 23 (D -> D MAYOR expression1 .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53


state 68

    (24) D -> D MENORIG expression1 .
    (27) expression1 -> expression1 . MAS T
    (28) expression1 -> expression1 . MENOS T

    MENOR           reduce using rule 24 (D -> D MENORIG expression1 .)
    MAYOR           reduce using rule 24 (D -> D MENORIG expression1 .)
    MENORIG         reduce using rule 24 (D -> D MENORIG expression1 .)
    MAYORIG         reduce using rule 24 (D -> D MENORIG expression1 .)
    IGUAL           reduce using rule 24 (D -> D MENORIG expression1 .)
    DIFERENTE       reduce using rule 24 (D -> D MENORIG expression1 .)
    AND             reduce using rule 24 (D -> D MENORIG expression1 .)
    PyC             reduce using rule 24 (D -> D MENORIG expression1 .)
    OR              reduce using rule 24 (D -> D MENORIG expression1 .)
    ParD            reduce using rule 24 (D -> D MENORIG expression1 .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53


state 69

    (25) D -> D MAYORIG expression1 .
    (27) expression1 -> expression1 . MAS T
    (28) expression1 -> expression1 . MENOS T

    MENOR           reduce using rule 25 (D -> D MAYORIG expression1 .)
    MAYOR           reduce using rule 25 (D -> D MAYORIG expression1 .)
    MENORIG         reduce using rule 25 (D -> D MAYORIG expression1 .)
    MAYORIG         reduce using rule 25 (D -> D MAYORIG expression1 .)
    IGUAL           reduce using rule 25 (D -> D MAYORIG expression1 .)
    DIFERENTE       reduce using rule 25 (D -> D MAYORIG expression1 .)
    AND             reduce using rule 25 (D -> D MAYORIG expression1 .)
    PyC             reduce using rule 25 (D -> D MAYORIG expression1 .)
    OR              reduce using rule 25 (D -> D MAYORIG expression1 .)
    ParD            reduce using rule 25 (D -> D MAYORIG expression1 .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53


state 70

    (27) expression1 -> expression1 MAS T .
    (30) T -> T . POR F
    (31) T -> T . DIVIDE F

    MAS             reduce using rule 27 (expression1 -> expression1 MAS T .)
    MENOS           reduce using rule 27 (expression1 -> expression1 MAS T .)
    MENOR           reduce using rule 27 (expression1 -> expression1 MAS T .)
    MAYOR           reduce using rule 27 (expression1 -> expression1 MAS T .)
    MENORIG         reduce using rule 27 (expression1 -> expression1 MAS T .)
    MAYORIG         reduce using rule 27 (expression1 -> expression1 MAS T .)
    IGUAL           reduce using rule 27 (expression1 -> expression1 MAS T .)
    DIFERENTE       reduce using rule 27 (expression1 -> expression1 MAS T .)
    AND             reduce using rule 27 (expression1 -> expression1 MAS T .)
    PyC             reduce using rule 27 (expression1 -> expression1 MAS T .)
    OR              reduce using rule 27 (expression1 -> expression1 MAS T .)
    ParD            reduce using rule 27 (expression1 -> expression1 MAS T .)
    POR             shift and go to state 54
    DIVIDE          shift and go to state 55


state 71

    (28) expression1 -> expression1 MENOS T .
    (30) T -> T . POR F
    (31) T -> T . DIVIDE F

    MAS             reduce using rule 28 (expression1 -> expression1 MENOS T .)
    MENOS           reduce using rule 28 (expression1 -> expression1 MENOS T .)
    MENOR           reduce using rule 28 (expression1 -> expression1 MENOS T .)
    MAYOR           reduce using rule 28 (expression1 -> expression1 MENOS T .)
    MENORIG         reduce using rule 28 (expression1 -> expression1 MENOS T .)
    MAYORIG         reduce using rule 28 (expression1 -> expression1 MENOS T .)
    IGUAL           reduce using rule 28 (expression1 -> expression1 MENOS T .)
    DIFERENTE       reduce using rule 28 (expression1 -> expression1 MENOS T .)
    AND             reduce using rule 28 (expression1 -> expression1 MENOS T .)
    PyC             reduce using rule 28 (expression1 -> expression1 MENOS T .)
    OR              reduce using rule 28 (expression1 -> expression1 MENOS T .)
    ParD            reduce using rule 28 (expression1 -> expression1 MENOS T .)
    POR             shift and go to state 54
    DIVIDE          shift and go to state 55


state 72

    (30) T -> T POR F .

    POR             reduce using rule 30 (T -> T POR F .)
    DIVIDE          reduce using rule 30 (T -> T POR F .)
    MAS             reduce using rule 30 (T -> T POR F .)
    MENOS           reduce using rule 30 (T -> T POR F .)
    MENOR           reduce using rule 30 (T -> T POR F .)
    MAYOR           reduce using rule 30 (T -> T POR F .)
    MENORIG         reduce using rule 30 (T -> T POR F .)
    MAYORIG         reduce using rule 30 (T -> T POR F .)
    IGUAL           reduce using rule 30 (T -> T POR F .)
    DIFERENTE       reduce using rule 30 (T -> T POR F .)
    AND             reduce using rule 30 (T -> T POR F .)
    PyC             reduce using rule 30 (T -> T POR F .)
    OR              reduce using rule 30 (T -> T POR F .)
    ParD            reduce using rule 30 (T -> T POR F .)


state 73

    (31) T -> T DIVIDE F .

    POR             reduce using rule 31 (T -> T DIVIDE F .)
    DIVIDE          reduce using rule 31 (T -> T DIVIDE F .)
    MAS             reduce using rule 31 (T -> T DIVIDE F .)
    MENOS           reduce using rule 31 (T -> T DIVIDE F .)
    MENOR           reduce using rule 31 (T -> T DIVIDE F .)
    MAYOR           reduce using rule 31 (T -> T DIVIDE F .)
    MENORIG         reduce using rule 31 (T -> T DIVIDE F .)
    MAYORIG         reduce using rule 31 (T -> T DIVIDE F .)
    IGUAL           reduce using rule 31 (T -> T DIVIDE F .)
    DIFERENTE       reduce using rule 31 (T -> T DIVIDE F .)
    AND             reduce using rule 31 (T -> T DIVIDE F .)
    PyC             reduce using rule 31 (T -> T DIVIDE F .)
    OR              reduce using rule 31 (T -> T DIVIDE F .)
    ParD            reduce using rule 31 (T -> T DIVIDE F .)


state 74

    (33) F -> H POTENCIA F .

    POR             reduce using rule 33 (F -> H POTENCIA F .)
    DIVIDE          reduce using rule 33 (F -> H POTENCIA F .)
    MAS             reduce using rule 33 (F -> H POTENCIA F .)
    MENOS           reduce using rule 33 (F -> H POTENCIA F .)
    MENOR           reduce using rule 33 (F -> H POTENCIA F .)
    MAYOR           reduce using rule 33 (F -> H POTENCIA F .)
    MENORIG         reduce using rule 33 (F -> H POTENCIA F .)
    MAYORIG         reduce using rule 33 (F -> H POTENCIA F .)
    IGUAL           reduce using rule 33 (F -> H POTENCIA F .)
    DIFERENTE       reduce using rule 33 (F -> H POTENCIA F .)
    AND             reduce using rule 33 (F -> H POTENCIA F .)
    PyC             reduce using rule 33 (F -> H POTENCIA F .)
    OR              reduce using rule 33 (F -> H POTENCIA F .)
    ParD            reduce using rule 33 (F -> H POTENCIA F .)


state 75

    (35) H -> ParI expression ParD .

    POTENCIA        reduce using rule 35 (H -> ParI expression ParD .)
    POR             reduce using rule 35 (H -> ParI expression ParD .)
    DIVIDE          reduce using rule 35 (H -> ParI expression ParD .)
    MAS             reduce using rule 35 (H -> ParI expression ParD .)
    MENOS           reduce using rule 35 (H -> ParI expression ParD .)
    MENOR           reduce using rule 35 (H -> ParI expression ParD .)
    MAYOR           reduce using rule 35 (H -> ParI expression ParD .)
    MENORIG         reduce using rule 35 (H -> ParI expression ParD .)
    MAYORIG         reduce using rule 35 (H -> ParI expression ParD .)
    IGUAL           reduce using rule 35 (H -> ParI expression ParD .)
    DIFERENTE       reduce using rule 35 (H -> ParI expression ParD .)
    AND             reduce using rule 35 (H -> ParI expression ParD .)
    PyC             reduce using rule 35 (H -> ParI expression ParD .)
    OR              reduce using rule 35 (H -> ParI expression ParD .)
    ParD            reduce using rule 35 (H -> ParI expression ParD .)


state 76

    (39) ifCond -> if ParI expression ParD LlaveI . code LlaveD ifElse
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 77
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 77

    (39) ifCond -> if ParI expression ParD LlaveI code . LlaveD ifElse

    LlaveD          shift and go to state 78


state 78

    (39) ifCond -> if ParI expression ParD LlaveI code LlaveD . ifElse
    (40) ifElse -> . else LlaveI code LlaveD code
    (41) ifElse -> . code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    else            shift and go to state 81
    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 79
    ifElse                         shift and go to state 80
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 79

    (41) ifElse -> code .

    LlaveD          reduce using rule 41 (ifElse -> code .)


state 80

    (39) ifCond -> if ParI expression ParD LlaveI code LlaveD ifElse .

    LlaveD          reduce using rule 39 (ifCond -> if ParI expression ParD LlaveI code LlaveD ifElse .)


state 81

    (40) ifElse -> else . LlaveI code LlaveD code

    LlaveI          shift and go to state 82


state 82

    (40) ifElse -> else LlaveI . code LlaveD code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 83
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 83

    (40) ifElse -> else LlaveI code . LlaveD code

    LlaveD          shift and go to state 84


state 84

    (40) ifElse -> else LlaveI code LlaveD . code
    (2) code -> . declaration
    (3) code -> . definition
    (4) code -> . ifCond
    (5) code -> . empty
    (6) declaration -> . int ID asign PyC code
    (7) declaration -> . bool ID asign PyC code
    (10) definition -> . identifier ASIGNA expression PyC code
    (39) ifCond -> . if ParI expression ParD LlaveI code LlaveD ifElse
    (42) empty -> .
    (38) identifier -> . ID

    int             shift and go to state 9
    bool            shift and go to state 11
    if              shift and go to state 13
    LlaveD          reduce using rule 42 (empty -> .)
    ID              shift and go to state 10

    code                           shift and go to state 85
    declaration                    shift and go to state 5
    definition                     shift and go to state 6
    ifCond                         shift and go to state 7
    empty                          shift and go to state 8
    identifier                     shift and go to state 12

state 85

    (40) ifElse -> else LlaveI code LlaveD code .

    LlaveD          reduce using rule 40 (ifElse -> else LlaveI code LlaveD code .)

